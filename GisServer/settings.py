"""
Django settings for GisServer project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

####################### Server Information  ####################

sender_server           = '34.87.133.221'
reciever_server         = '35.244.39.233'
main_server             = '34.93.225.86'

url = "https://sender.paplilabs.com/login_api/ManualToken/"
#################### #################### ####################
AUTH_USER_MODEL = 'user.User'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'w!_6y)!sx%mc6_xujj&ra-1zc3g%yrh35c5ui8_)18o@5$(rdr'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1','localhost','*']
############################ STATIC FILES ##############################
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/



BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# print('base dir: ',BASE_DIR)
PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
# print('project dir: ',PROJECT_DIR)
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
print('static dir: ',STATIC_ROOT)
STATIC_ROOT_URL = STATIC_ROOT + '/'
STATIC_URL = STATIC_ROOT_URL





########################################################################

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'leaflet',
    'django_extensions',
    'corsheaders',
    'reciever', #app
    'update', #app
    'filled', #app
    'user', #app
    'points', #app
    'silk',
    'debug_toolbar',
    'rest_framework',
    'rest_framework.authtoken',
    'analytics',
    'rest_framework_tracking',
    'cryptography',
]

# REST_FRAMEWORK = {
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.AllowAny',
#     ],

#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         # 'reciever.authentication.BearerAuthentication',    
#         # 'rest_framework.authentication.BasicAuthentication',
#         # 'rest_framework.authentication.SessionAuthentication',
#         #  'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ]
# }
SILKY_AUTHENTICATION = True
SILKY_META = True
# SILKY_MAX_RESPONSE_BODY_SIZE = 1024  # If response body>1024 bytes, ignore

LOGIN_URL = '/admin/'

MIDDLEWARE = [
    'reciever.middlewares.CheckUserMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'corsheaders.middleware.CorsPostCsrfMiddleware',
    # 'silk.middleware.SilkyMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]
GRAPH_MODELS = {
      'app_labels': ["myapp1", "myapp2"],
  'all_applications': False,
  'group_models': True,
}
CORS_ALLOWED_ORIGINS = [
    'https://portal.novaeavenue.com',
    'https://demo-raw.novaeavenue.com',
    'https://map.novaeavenue.com',
    'http://map.novaeavenue.com',
    'https://apis.novaeavenue.com',
    'http://apis.novaeavenue.com',
    'https://manage.novaeavenue.com',
    'http://localhost:3002'
]
CORS_ORIGIN_ALLOW_ALL = False 
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'GisServer.urls'


DRF_TRACKING_DECODE_REQUEST_BODY = False
DRF_TRACKING_ADMIN_LOG_READONLY = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'GisServer.wsgi.application'

##########################
DATABASE_ROUTERS = ['reciever.router.AuthRouter', ]

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'recieverdb',
        'USER': 'senderdb',
        'PASSWORD': 'harebol@123',
        'HOST': 'senderdb.postgres.database.azure.com',
        'PORT': '5432',
    },
    'users': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'senderdb',
        'USER': 'senderdb',
        'PASSWORD': 'harebol@123',
        'HOST': 'senderdb.postgres.database.azure.com',
        'PORT': '5432',
    }
    # 'default': {
    #     'ENGINE': 'django.contrib.gis.db.backends.postgis',
    #     'NAME': 'freshrecieverdb',
    #     'USER': 'papli',
    #     'PASSWORD': 'harebol@123',
    #     'HOST': 'localhost',
    #     'PORT': '5432',
    # },
    # 'default': {
    #     'ENGINE': 'django.contrib.gis.db.backends.postgis',
    #     'NAME': 'recieverdb',
    #     'USER': 'papli',
    #     'PASSWORD': 'harebol@123',
    #     'HOST': 'localhost',
    #     'PORT': '5432',
    # },
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
PROJECT_TOKEN = '3f34289d1993b1d888701dc373831350'

from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=400),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=400),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'email',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(days=400),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=400),
}


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# ---------------------------------------------------------------------------- #
#                             Google Cloud Storage                             #
# ---------------------------------------------------------------------------- #

"""
Documentation
https://django-storages.readthedocs.io/en/latest/backends/gcloud.html

Service act for json file
https://console.cloud.google.com/apis/credentials/serviceaccountkey?_ga=2.76765843.-721779343.1576652915
"""

"""code before July 16
from google.oauth2 import service_account
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880


KEY_DIR = os.path.join(BASE_DIR, 'key')

credentials = os.path.join(KEY_DIR, 'youslyRD-ace3b64eccaa.json')
# credentials = os.path.join(KEY_DIR, 'youslyrd-adf69d8c0c86.json')


DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
GS_BUCKET_NAME = 'gis_receiving_pothole_image_bucket'
GS_CREDENTIALS = service_account.Credentials.from_service_account_file(credentials)
"""
from google.oauth2 import service_account
KEY_DIR = os.path.join(BASE_DIR, 'key')
credentials = os.path.join(KEY_DIR, 'nova-avenue-1a9ebb35f8e8.json')
DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
STATICFILES_STORAGE = 'storages.backends.azure_storage.AzureStorage'
# DEFAULT_FILE_STORAGE = 'storages.backends.azure_storage.AzureStorage'
AZURE_ACCOUNT_NAME = "nasenderstorage"
AZURE_ACCOUNT_KEY = "TxnPINbc6ytIWs8V8xizCP7zFfNBYdSa1AYldL5kJ5OKDvhwbNcNbr3nT7g+9jLQgF3KiZi/hArqE8b1qGxI4w=="
AZURE_CONTAINER = "sender"

GS_BUCKET_NAME = 'reciever_bucket'
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880
GS_CREDENTIALS = service_account.Credentials.from_service_account_file(credentials)

""" doc for datetime
import datetime
datetime_object = datetime.datetime.now()
print(datetime_object) ## current date

## Get number of years
from datetime import timedelta
year = timedelta(days=365)
fiftyyear = 50 * year
fiftyyear
"""

from datetime import timedelta
year = timedelta(days=365)
fiftyyear = 50 * year

GS_EXPIRATION = fiftyyear
# GS_CUSTOM_ENDPOINT = 'https://storage.paplilabs.com'


# ---------------------------------------------------------------------------- #
#                                 Graph models                                 #
# ---------------------------------------------------------------------------- #

GRAPH_MODELS = {
  'all_applications': True,
  'group_models': True,
}





































